/*
 * Copyright 2019-2019 Michael Hoffer <info@michaelhoffer.de>. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * If you use this software for scientific research then please cite the following publication(s):
 *
 * M. Hoffer, C. Poliwoda, & G. Wittum. (2013). Visual reflection library:
 * a framework for declarative GUI programming on the Java platform.
 * Computing and Visualization in Science, 2013, 16(4),
 * 181â€“192. http://doi.org/10.1007/s00791-014-0230-y
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package eu.mihosoft.nativefx;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 * The tests do currently only verify that the JNI based native binding works.
 * This is to ensure that no {@link UnsatisfiedLinkError} and similar exceptions
 * are thrown.
 * 
 * <p><b>Note:</b></p> we still need to ensure that the behavior for events
 * and buffer synchronization among multiple processes is consistent on all
 * supported platforms. So far, there's no formal description for expected
 * behavior. 
 */
public class NativeBindingTest {
    @Test public void testNativeMethodsSendMsg() {
        NativeBinding.init();

        int key = NativeBinding.connectTo("_mem");
        String response = NativeBinding.sendMsg(key, "abcde");

        System.out.println("Response: " + response);

        // assertTrue("sendMsg should return 'hello from native'", "hello from native!".equals(response));
    }

    @Test public void testNativeMethodsConnectTo() {
        NativeBinding.init();
        // TODO implement
        // int key = NativeBinding.connectTo("_mem");
        // assertTrue("connectTo should return 0", 0==key);
    }

    @Test public void testNativeMethodsNextKey() {
        NativeBinding.init();
        int key = NativeBinding.nextKey();
        assertTrue("nextKey should return 0", 0==key);
    }
}
