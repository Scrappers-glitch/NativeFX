plugins {

    id 'java'

    id 'org.openjfx.javafxplugin' version '0.0.7'
    id "de.undercouch.download" version "3.4.3"

    id 'com.github.hierynomus.license' version '0.14.0'
}

repositories {
    jcenter()
    mavenCentral()
}

boolean runsOn(String osName) {
    return System.properties['os.name'].toLowerCase().contains(osName.toLowerCase())
} 
ext.isWindows = runsOn('windows')
ext.isLinux = runsOn('linux')
ext.isMacOs = runsOn('mac')

wrapper {
    gradleVersion = '5.4'
}

sourceCompatibility = '1.11'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava {
    options.warnings = true
    options.deprecation = true
    options.compilerArgs += ["-Xdoclint:none", "-Xlint:none", "-h", file("$projectDir/src/main/native/src/main/headers/")]
}

dependencies {
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'   
}

javafx {
    modules = [ 'javafx.controls']
}

task downloadBoostHeaders(type: Download) {
    
    src 'http://deps.mihosoft.eu/boost/1.58.0/headers/boost.zip'
    dest "$projectDir/src/main/native/ext/headers/boost.zip"
    
    onlyIfNewer true   
}

task downloadAndUnzipBoostHeaders(dependsOn: downloadBoostHeaders, type: Copy) {
    
    from zipTree(downloadBoostHeaders.dest)
    into "$projectDir/src/main/native/ext/headers/"
    
}


task cmakeNative(dependsOn: [downloadBoostHeaders], type:Exec) {
    doFirst {
        mkdir "$projectDir/build/native/"
    }

    workingDir "$projectDir/build/native/"

    if(isWindows) {
        commandLine 'cmd', '/c', 'cmake.exe', "$projectDir/src/main/native/", "-DCMAKE_GENERATOR_PLATFORM=x64"
    } else {
        commandLine 'cmake', "$projectDir/src/main/native/"
    }
}

task compileNative(dependsOn: cmakeNative, type:Exec) {
    workingDir "$projectDir/build/native/"
    
    String msbuildCmd

    if(new File("C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/MSBuild/15.0/Bin/msbuild.exe").exists()) {
        // path to msbuild for azure pipelines
        msbuildCmd = "C:/Program Files (x86)/Microsoft Visual Studio/2017/Enterprise/MSBuild/15.0/Bin/msbuild.exe";
    } else if(new File("C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/bin/msbuild.exe").exists()) {
        msbuildCmd = "C:/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/bin/msbuild.exe"
    } else {
        // we didn't find msbuild in default paths
        // if it's on the path this will work
        msbuildCmd = "msbuild.exe"
    }

    if(isWindows) {
        commandLine 'cmd', '/c', msbuildCmd, 'nativefx.sln', '/property:Configuration=Release', '/property:Platform=x64'
    } else {
        commandLine 'make'
    }
}

task copyNativeToResources(dependsOn: compileNative, type:Copy) {

    if(isWindows) {
        println("!!! copying on windows: $projectDir/build/native/Release/")
        copy {
            from "$projectDir/build/native/Release/"
            into "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/windows/x64/"
        }

        // TODO check whether we needto ship redist libraries on windows
        // copy {
        //     from "$projectDir/resources/native/windows/x64/"
        //     into "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/windows/x64/"
        // }

    } else if(isLinux) {
        println("!!! copying on linux: $projectDir/build/native/libnativefx.so")
        copy {
            from "$projectDir/build/native/libnativefx.so"
            into "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/linux/x64/"
        }
    } else if(isMacOs) {
        println("!!! copying on macos: $projectDir/build/native/libnativefx.dylib")
        copy {
            from "$projectDir/build/native/libnativefx.dylib"
            into "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/macos/x64/"
        }
    }

} 

task lsDir(dependsOn: compileNative, type:Exec) {


    println("!!! OS: "+System.properties['os.name'].toLowerCase())
    

    errorOutput = new ByteArrayOutputStream()

    workingDir "$projectDir/build/native/"

    if(isWindows) {
        commandLine 'cmd', '/c', 'dir'
    } else {
        commandLine 'ls'
    }

    doLast {
        println errorOutput.toString()
    }
}

task lsDirRes(dependsOn: copyNativeToResources, type:Exec) {

    errorOutput = new ByteArrayOutputStream()

    if(isWindows) {
        workingDir "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/windows/x64/"
        commandLine 'cmd', '/c', 'dir'
    } else if(isMacOs) {
        workingDir "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/macos/x64/"
        commandLine 'ls', "-lR"
    } else if(isLinux) {
        workingDir "$projectDir/src/main/resources/eu/mihosoft/nativefx/nativelibs/linux/x64/"
        commandLine 'ls', "-lR"
    } else {
        // unsupported os
    }

    doLast {
        println errorOutput.toString()
    }
}

jar {
//    include '**/*.dylib'
//    include '**/*.so'
//    include '**/*.dll'
}

jar.dependsOn += "copyNativeToResources"
jar.dependsOn += "lsDir"
jar.dependsOn += "lsDirRes"

license {
    header = rootProject.file('config/HEADER')
    strictCheck = true
    ignoreFailures = true
    mapping {
        java   = 'SLASHSTAR_STYLE'
        groovy = 'SLASHSTAR_STYLE'
        fxml   = 'XML_STYLE'
    }

    ext.yearCurrent  = new java.text.SimpleDateFormat("yyyy").format(new Date())
    ext.yearSince1   = '2019'
    ext.author1 = 'Michael Hoffer <info@michaelhoffer.de>'

    exclude '**/*.svg'
    exclude '**/*.dll'
    exclude '**/*.exp'
    exclude '**/*.lib'
    exclude '**/*.so'
    exclude '**/*.dylib'
}

test {
    testLogging {
        // Make sure output from
        // standard out or error is shown
        // in Gradle output.
        showStandardStreams = true
 
        // Or we use events method:
        // events 'standard_out', 'standard_error'
 
        // Or set property events:
        // events = ['standard_out', 'standard_error']
 
        // Instead of string values we can
        // use enum values:
        // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
        //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
    }
}
